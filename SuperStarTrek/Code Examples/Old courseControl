  mutating func courseControl (direction: Double, warp: Double) {
    var course = 0.0
    var courseInRadians = 0.0
    var repairFactor = 0.0
    var system = 0
    var kx, ky: Int
    //If warp engines are damaged then set maximum warp to 0.2 and disp[lay message
    if damage[1] < 0 {
      maxWarp = "0.2"
      displayBlankLine()
      messageEntries.append(MessageEntry(line: "DAMAGE CONTROL REPORT: Warp engines are damaged - Maximum Warp 0.2"))
      return //Seems to cause exit?
    }
    //1. Set course and speed
    course = Double(direction)
    if course == 9 {//Course of 9 == 1
      course = 1
    }
    //Check if course within range 1.0 to 8.0
    if course < 1 || course >= 9 {//Not in range so message error and exit
      messageEntries.append(MessageEntry(line: "LT. SULU REPORTS: Incorrect course data, Sir!"))
      return
    }
    if warp <= 0 {//Warp out of range so message and exit
      messageEntries.append(MessageEntry(line: "CHIEF ENGINEER SCOTT REPORTS: Incorrect Warp Factor, Sir!"))
      return
    }
    if warp > Double(maxWarp) ?? 0.0 {//Warp out of range so message and exit
      messageEntries.append(MessageEntry(line: "CHIEF ENGINEER SCOTT REPORTS: The engines won't take Warp Factor \(warp)!"))
      return
    }
    noOfSteps = Int(warp * 8 + 0.5)
    if currentEnergy < noOfSteps {//Not enough energy so message and exit
      messageEntries.append(MessageEntry(line: "ENGINEERING REPORTS: Insufficient energy for manoeuvring at Warp \(warp)!"))
      if shields >= (noOfSteps - currentEnergy) && damage[7] >= 0 {//Use shields to make up for shortage of energy as long as they're not damaged
        messageEntries.append(MessageEntry(line: "DEFELECTOR CONTROL REPORTS: Acknowledges \(shields) units of energy presently deployed to Shields."))
      }
    }
    //2. Klingons move before Enterprise
    if klingonsInQuadrant != 0 {
      for i in 1...klingonsInQuadrant {
        kx = klingons[i][1]
        ky = klingons[i][2]
        quadrant[kx][ky] = "   "
        let coordinates = findEmptyPlaceinQuadrant()
        kx = coordinates.y
        ky = coordinates.x
        quadrant[kx][ky] = "+K+"
      }
      //3. Klingons fire before Enterprise moves
      klingonsShooting()
      if destroyed {
        gameOver(reason: "Destroyed")
      }
    }
    //4. Check for damage repaired during movement
    repairFactor = warp
    if warp >= 1 {repairFactor = 1.00}
    for i in 1...8 {
      if damage[i] < 0 {
        damage[i] = damage[i] + repairFactor //Moving 1 Quadrant repair by 1
        if (damage[i] > 0.1 && damage[i] < 0) { //If almost 0 go back to -0.1
          damage[i] = 0.1
        } else {
          if damage[i] >= 0 {
            messageEntries.append(MessageEntry(line: "DAMAGE CONTROL REPORTS: \(systems[i]) repair completed."))
          }
        }
      }
    }
    //5. Random damage caused or repaired
    if Double.random(in:0.00...0.99) <= 0.2 {
      system = Int.random(in: 1...8)
      if Double.random(in: 0.00...0.99) >= 0.6 {
        damage[system] = damage[system] + Double.random(in: 0.00...1) * 3 + 1
        displayBlankLine()
        messageEntries.append(MessageEntry(line: "DAMAGE CONTROL REPORTS: \(systems[system]) state of repair improved."))
      } else {
        damage[system] = damage[system] - Double.random(in: 0.00...1) * 5 + 1
        displayBlankLine()
        messageEntries.append(MessageEntry(line: "DAMAGE CONTROL REPORTS: \(systems[system]) damaged."))
      }
    }
    //6. Enterprise can now move
    //Clear Enterprise from current position
    quadrant[Int(sectorRow)][Int(sectorCol)] = "   "
    //Calculate vector displacement
    courseInRadians = (Double.pi/4) * (course - 1)
    stepX = sin(courseInRadians) * (-1)
    stepY = cos(courseInRadians)
    if debug {print("stepX \(stepX) stepY \(stepX)")}
    //Save original Enterprise coordinates in case of collision
    x = sectorRow //Save Sector Row
    y = sectorCol //Save Sector Column
    q4 = quadrantRow //Save Quadrant Row
    q5 = quadrantCol //Save Quadrant Column
    for _ in 1...noOfSteps {
      sectorRow += stepX
      sectorCol += stepY
      if Int(sectorRow) < 1 || Int(sectorRow) > 8 || Int(sectorCol) < 1 || Int(sectorCol) > 8 {
        exceededQuadantLimits()
        //Need to unpack sector details of in a new quadrant
        endOfMovement(warp: warp)
        shortRangeScan()
        return
      } else { //Not exceeded quadrant limits
        if quadrant[Int(sectorRow)][Int(sectorCol)] == "   " {
          sectorRow += 0.5
          sectorCol += 0.5
        } else {
          sectorRow = sectorRow - stepX
          sectorCol = sectorCol - stepY
          displayBlankLine()
          messageEntries.append(MessageEntry(line: "*** WARP ENGINES SHUT DOWN AT SECTOR \(Int(sectorRow)),\(Int(sectorCol)) DUE TO BAD NAVIGATION ***"))
          sectorRow += 0.5 //?
          sectorCol += 0.5 //?
          checkIfDocked() //?
          break
        }
      }
    } //End of noOfSteps loop
    sectorRow = Double(Int(sectorRow))
    sectorCol = Double(Int(sectorCol))
    //3370 A$="<*>":Z1=INT(S1):Z2=INT(S2):GOSUB 8670:GOSUB 3910:T8=1
    //3430 IF W1<1 THEN T8=.1*INT(10*W1)
    //3450 T=T+T8:IF T>T0+T9 THEN 6220
    //3470 REM SEE IF DOCKED, THEN GET COMMAND
    //3480 GOTO 1980
    
    endOfMovement(warp: warp)
    shortRangeScan()
  } //END OF courseControl
  
